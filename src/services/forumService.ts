// Servicio del Foro - Historias de Esper// Interfaces de amistad removidas para simplificarofile } from '../api/client';

export interface Storia {
  id: string;
  authorId: string;
  authorName: string;
  title: string;
  content: string;
  category: 'superacion' | 'violencia' | 'trabajo' | 'familia' | 'salud' | 'educacion' | 'otro';
  tags?: string[];
  createdAt: Date;
  updatedAt: Date;
  likes: number;
  commentsCount: number;
  isAnonymous: boolean;
  status: 'published' | 'draft' | 'reported';
}

export interface Comment {
  id: string;
  storiaId: string;
  authorId: string;
  authorName: string;
  content: string;
  createdAt: Date;
  likes: number;
  parentId?: string; // Para respuestas a comentarios
  isAnonymous: boolean;
}

export interface ForumUser {
  id: string;
  name: string;
  email: string;
  joinedAt: Date;
  storiesCount: number;
  commentsCount: number;
  likesReceived: number;
}

export interface FriendRequest {
  id: string;
  fromUserId: string;
  fromUserName: string;
  toUserId: string;
  toUserName: string;
  status: 'pending' | 'accepted' | 'declined';
  createdAt: Date;
  respondedAt?: Date;
}

export interface Friendship {
  id: string;
  userId1: string;
  userName1: string;
  userId2: string;
  userName2: string;
  createdAt: Date;
}

class ForumService {
  private readonly storiesKey = 'womxi_stories';
  private readonly commentsKey = 'womxi_comments';
  // Friendship keys removed
  private currentUser: ForumUser | null = null;

  constructor() {
    this.initializeUser();
    this.initializeMockData();
  }

  private initializeUser() {
    const userData = localStorage.getItem('w-protect-user');
    if (userData) {
      const user = JSON.parse(userData);
      this.currentUser = {
        id: user.email,
        name: user.name,
        email: user.email,
        joinedAt: new Date(user.registeredAt || Date.now()),
        storiesCount: 0,
        commentsCount: 0,
        likesReceived: 0
      };
    }
  }

  private initializeMockData() {
    // Solo agregar datos mock si no existen ya
    const existingStories = this.getStoredStories();
    if (existingStories.length === 0) {
      const mockStories: Storia[] = [
        {
          id: 'story-1',
          authorId: 'maria@womxi.com',
          authorName: 'Mar√≠a Gonz√°lez',
          title: 'Mi historia de superaci√≥n despu√©s de la violencia dom√©stica',
          content: 'Durante a√±os viv√≠ en una relaci√≥n t√≥xica, donde la violencia psicol√≥gica era parte del d√≠a a d√≠a. Pens√© que nunca saldr√≠a de ah√≠, pero gracias al apoyo de mi hermana y organizaciones como esta, pude encontrar la fuerza para irme. Hoy, 3 a√±os despu√©s, tengo mi propio negocio y mis hijos est√°n seguros. Si est√°s pasando por algo similar, quiero que sepas que S√ç se puede salir. No est√°s sola. üí™‚ù§Ô∏è',
          category: 'violencia',
          tags: ['violencia-domestica', 'superacion', 'empoderamiento'],
          createdAt: new Date(Date.now() - 86400 * 1000 * 2), // 2 d√≠as atr√°s
          updatedAt: new Date(Date.now() - 86400 * 1000 * 2),
          likes: 45,
          commentsCount: 12,
          isAnonymous: false,
          status: 'published'
        },
        {
          id: 'story-2',
          authorId: 'ana@womxi.com',
          authorName: 'Ana (An√≥nima)',
          title: 'C√≥mo consegu√≠ trabajo despu√©s de los 40',
          content: 'Despu√©s del divorcio, a los 42 a√±os, me qued√© sin trabajo y con dos hijos que mantener. Nadie me contrataba por la edad, pero no me rend√≠. Estudi√© marketing digital en l√≠nea, hice cursos gratuitos, practiqu√© much√≠simo. Hoy trabajo desde casa para una empresa internacional y gano m√°s que antes. La edad es solo un n√∫mero cuando tienes determinaci√≥n. üåü',
          category: 'trabajo',
          tags: ['trabajo', 'edad', 'marketing-digital', 'independencia'],
          createdAt: new Date(Date.now() - 86400 * 1000 * 5), // 5 d√≠as atr√°s
          updatedAt: new Date(Date.now() - 86400 * 1000 * 5),
          likes: 32,
          commentsCount: 8,
          isAnonymous: true,
          status: 'published'
        },
        {
          id: 'story-3',
          authorId: 'sofia@womxi.com',
          authorName: 'Sof√≠a Ram√≠rez',
          title: 'Mi lucha contra la ansiedad y la depresi√≥n',
          content: 'Durante meses no pod√≠a salir de casa, la ansiedad me paralizaba. Pens√© que nunca volver√≠a a ser la misma. Pero poco a poco, con terapia, medicaci√≥n y mucho apoyo familiar, fui saliendo del t√∫nel. Hoy puedo decir que estoy mejor, que la vida vale la pena y que pedir ayuda no es de d√©biles, es de valientes. Si sientes que no puedes m√°s, busca ayuda profesional. Tu vida importa. ü¶ã',
          category: 'salud',
          tags: ['salud-mental', 'ansiedad', 'depresion', 'terapia'],
          createdAt: new Date(Date.now() - 86400 * 1000 * 1), // 1 d√≠a atr√°s
          updatedAt: new Date(Date.now() - 86400 * 1000 * 1),
          likes: 67,
          commentsCount: 25,
          isAnonymous: false,
          status: 'published'
        }
      ];

      localStorage.setItem(this.storiesKey, JSON.stringify(mockStories));

      // Comentarios mock
      const mockComments: Comment[] = [
        {
          id: 'comment-1',
          storiaId: 'story-1',
          authorId: 'elena@womxi.com',
          authorName: 'Elena',
          content: 'Gracias por compartir tu historia Mar√≠a. Me diste la fuerza que necesitaba para tomar una decisi√≥n importante. No estamos solas. ‚ù§Ô∏è',
          createdAt: new Date(Date.now() - 86400 * 1000),
          likes: 12,
          isAnonymous: false
        },
        {
          id: 'comment-2',
          storiaId: 'story-1',
          authorId: 'carmen@womxi.com',
          authorName: 'Carmen',
          content: 'Qu√© valiente eres. Tu historia me recuerda que siempre hay esperanza. Gracias por inspirarnos üí™',
          createdAt: new Date(Date.now() - 86400 * 1000 * 0.5),
          likes: 8,
          isAnonymous: false
        },
        {
          id: 'comment-3',
          storiaId: 'story-3',
          authorId: 'lucia@womxi.com',
          authorName: 'Luc√≠a',
          content: 'Yo tambi√©n pas√© por algo similar. Es incre√≠ble c√≥mo compartes tu experiencia para ayudar a otras. Eres una guerrera ü¶ã',
          createdAt: new Date(Date.now() - 86400 * 1000 * 0.2),
          likes: 15,
          isAnonymous: false
        }
      ];

      localStorage.setItem(this.commentsKey, JSON.stringify(mockComments));
    }
  }

  // HISTORIAS
  async getStories(category?: string, limit?: number): Promise<Storia[]> {
    await new Promise(resolve => setTimeout(resolve, 300)); // Simular API
    
    let stories = this.getStoredStories();
    
    // Filtrar por categor√≠a si se especifica
    if (category && category !== 'todas') {
      stories = stories.filter(story => story.category === category);
    }
    
    // Ordenar por fecha (m√°s recientes primero)
    stories.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
    
    // Limitar resultados si se especifica
    if (limit) {
      stories = stories.slice(0, limit);
    }
    
    return stories;
  }

  async getStoryById(id: string): Promise<Storia | null> {
    const stories = this.getStoredStories();
    return stories.find(story => story.id === id) || null;
  }

  async createStory(storyData: Omit<Storia, 'id' | 'createdAt' | 'updatedAt' | 'likes' | 'commentsCount'>): Promise<Storia> {
    if (!this.currentUser) throw new Error('Usuario no autenticado');
    
    const newStory: Storia = {
      ...storyData,
      id: this.generateId(),
      createdAt: new Date(),
      updatedAt: new Date(),
      likes: 0,
      commentsCount: 0
    };
    
    const stories = this.getStoredStories();
    stories.unshift(newStory); // Agregar al inicio
    this.saveStories(stories);
    
    return newStory;
  }

  async likeStory(storyId: string): Promise<void> {
    const stories = this.getStoredStories();
    const storyIndex = stories.findIndex(s => s.id === storyId);
    
    if (storyIndex !== -1) {
      stories[storyIndex].likes += 1;
      this.saveStories(stories);
    }
  }

  async searchStories(query: string): Promise<Storia[]> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const stories = this.getStoredStories();
    const searchTerm = query.toLowerCase();
    
    return stories.filter(story =>
      story.title.toLowerCase().includes(searchTerm) ||
      story.content.toLowerCase().includes(searchTerm) ||
      story.tags?.some(tag => tag.toLowerCase().includes(searchTerm))
    );
  }

  // COMENTARIOS
  async getComments(storyId: string): Promise<Comment[]> {
    await new Promise(resolve => setTimeout(resolve, 200));
    
    const comments = this.getStoredComments();
    return comments
      .filter(comment => comment.storiaId === storyId)
      .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());
  }

  async addComment(commentData: Omit<Comment, 'id' | 'createdAt' | 'likes'>): Promise<Comment> {
    if (!this.currentUser) throw new Error('Usuario no autenticado');
    
    const newComment: Comment = {
      ...commentData,
      id: this.generateId(),
      createdAt: new Date(),
      likes: 0
    };
    
    const comments = this.getStoredComments();
    comments.push(newComment);
    this.saveComments(comments);
    
    // Actualizar contador de comentarios en la historia
    await this.updateStoryCommentsCount(commentData.storiaId);
    
    return newComment;
  }

  async likeComment(commentId: string): Promise<void> {
    const comments = this.getStoredComments();
    const commentIndex = comments.findIndex(c => c.id === commentId);
    
    if (commentIndex !== -1) {
      comments[commentIndex].likes += 1;
      this.saveComments(comments);
    }
  }

  // M√âTODOS DE AMISTAD
    // Funciones de amistad removidas para simplificar el proyecto

  // UTILIDADES
  getCurrentUser(): ForumUser | null {
    return this.currentUser;
  }

  getCommentsCountSync(storyId: string): number {
    const comments = this.getStoredComments();
    return comments.filter(comment => comment.storiaId === storyId).length;
  }

  getCategories() {
    return [
      { id: 'todas', name: 'Todas las historias', icon: 'üìö' },
      { id: 'superacion', name: 'Superaci√≥n Personal', icon: 'üí™' },
      { id: 'violencia', name: 'Violencia y Abuso', icon: 'üõ°Ô∏è' },
      { id: 'trabajo', name: 'Trabajo y Carrera', icon: 'üíº' },
      { id: 'familia', name: 'Familia e Hijos', icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶' },
      { id: 'salud', name: 'Salud Mental', icon: 'üß†' },
      { id: 'educacion', name: 'Educaci√≥n', icon: 'üéì' },
      { id: 'otro', name: 'Otros Temas', icon: '‚ú®' }
    ];
  }

  // M√âTODOS PRIVADOS
  private async updateStoryCommentsCount(storyId: string): Promise<void> {
    const stories = this.getStoredStories();
    const storyIndex = stories.findIndex(s => s.id === storyId);
    
    if (storyIndex !== -1) {
      const comments = this.getStoredComments();
      const commentCount = comments.filter(c => c.storiaId === storyId).length;
      stories[storyIndex].commentsCount = commentCount;
      this.saveStories(stories);
    }
  }

  private getStoredStories(): Storia[] {
    try {
      const stored = localStorage.getItem(this.storiesKey);
      if (!stored) return [];
      
      const parsed = JSON.parse(stored);
      return parsed.map((story: any) => ({
        ...story,
        createdAt: new Date(story.createdAt),
        updatedAt: new Date(story.updatedAt)
      }));
    } catch {
      return [];
    }
  }

  private saveStories(stories: Storia[]): void {
    localStorage.setItem(this.storiesKey, JSON.stringify(stories));
  }

  private getStoredComments(): Comment[] {
    try {
      const stored = localStorage.getItem(this.commentsKey);
      if (!stored) return [];
      
      const parsed = JSON.parse(stored);
      return parsed.map((comment: any) => ({
        ...comment,
        createdAt: new Date(comment.createdAt)
      }));
    } catch {
      return [];
    }
  }

  private saveComments(comments: Comment[]): void {
    localStorage.setItem(this.commentsKey, JSON.stringify(comments));
  }



  private generateId(): string {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }
}

export const forumService = new ForumService();